# LibreOffice conversion service
FROM ubuntu:22.04

# Install dependencies
RUN apt-get update && apt-get install -y \
    libreoffice \
    libreoffice-writer \
    libreoffice-impress \
    libreoffice-calc \
    python3 \
    python3-pip \
    python3-flask \
    imagemagick \
    poppler-utils \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Flask for API
RUN pip3 install flask flask-cors

# Create working directory
WORKDIR /app

# Create conversion script
RUN echo '#!/bin/bash\n\
input_file="$1"\n\
output_dir="$2"\n\
format="${3:-pdf}"\n\
\n\
if [ -z "$input_file" ] || [ -z "$output_dir" ]; then\n\
    echo "Usage: convert.sh <input_file> <output_dir> [format]"\n\
    exit 1\n\
fi\n\
\n\
mkdir -p "$output_dir"\n\
\n\
# Convert to PDF first if needed\n\
if [ "$format" = "png" ]; then\n\
    pdf_file="/tmp/temp_$(date +%s).pdf"\n\
    libreoffice --headless --convert-to pdf --outdir /tmp "$input_file"\n\
    base_name=$(basename "$input_file" | sed "s/\.[^.]*$//")\n\
    pdf_file="/tmp/${base_name}.pdf"\n\
    \n\
    if [ -f "$pdf_file" ]; then\n\
        # Convert PDF to PNG images\n\
        pdftoppm -png -r 300 "$pdf_file" "$output_dir/slide"\n\
        rm "$pdf_file"\n\
        echo "Conversion successful"\n\
    else\n\
        echo "PDF conversion failed"\n\
        exit 1\n\
    fi\n\
else\n\
    libreoffice --headless --convert-to "$format" --outdir "$output_dir" "$input_file"\n\
fi' > /app/convert.sh && chmod +x /app/convert.sh

# Create Python API server
RUN echo 'from flask import Flask, request, jsonify\n\
from flask_cors import CORS\n\
import subprocess\n\
import os\n\
import uuid\n\
import shutil\n\
\n\
app = Flask(__name__)\n\
CORS(app)\n\
\n\
@app.route("/health", methods=["GET"])\n\
def health():\n\
    return jsonify({"status": "healthy"})\n\
\n\
@app.route("/convert", methods=["POST"])\n\
def convert():\n\
    try:\n\
        data = request.json\n\
        input_file = data.get("input_file")\n\
        output_dir = data.get("output_dir")\n\
        format_type = data.get("format", "png")\n\
        \n\
        if not input_file or not output_dir:\n\
            return jsonify({"error": "Missing parameters"}), 400\n\
        \n\
        # Run conversion\n\
        result = subprocess.run(\n\
            ["/app/convert.sh", input_file, output_dir, format_type],\n\
            capture_output=True,\n\
            text=True,\n\
            timeout=120\n\
        )\n\
        \n\
        if result.returncode == 0:\n\
            # List generated files\n\
            files = []\n\
            if os.path.exists(output_dir):\n\
                files = sorted([f for f in os.listdir(output_dir) if f.endswith(".png")])\n\
            return jsonify({\n\
                "success": True,\n\
                "files": files,\n\
                "output": result.stdout\n\
            })\n\
        else:\n\
            return jsonify({\n\
                "error": "Conversion failed",\n\
                "output": result.stderr\n\
            }), 500\n\
    except subprocess.TimeoutExpired:\n\
        return jsonify({"error": "Conversion timeout"}), 500\n\
    except Exception as e:\n\
        return jsonify({"error": str(e)}), 500\n\
\n\
if __name__ == "__main__":\n\
    app.run(host="0.0.0.0", port=8080, debug=False)' > /app/api.py

# Expose API port
EXPOSE 8080

# Start API server
CMD ["python3", "/app/api.py"]