import { NextRequest, NextResponse } from "next/server";

interface SlideContent {
	slide_number: number;
	title: string;
	content: string[];
	speaker_notes: string;
	visual_suggestions: string;
	slide_type: "title" | "content" | "image" | "chart" | "conclusion";
}

interface PresentationContent {
	title: string;
	description: string;
	slides: SlideContent[];
}

export async function POST(request: NextRequest) {
	try {
		const formData = await request.formData();
		const prompt = formData.get("prompt") as string;
		const slideCount = parseInt(formData.get("slide_count") as string) || 10;
		const language = (formData.get("language") as string) || "en";
		const templateStyle =
			(formData.get("template_style") as string) || "modern";
		const format = (formData.get("format") as string) || "json";

		if (!prompt?.trim()) {
			return NextResponse.json(
				{ success: false, error: "Prompt is required" },
				{ status: 400 },
			);
		}

		// If requesting timeline variants, return multiple options
		if (format === "timeline-variants") {
			const variants = await generateTimelineVariants(
				prompt,
				slideCount,
				language,
			);
			return NextResponse.json({
				success: true,
				variants: variants,
				metadata: {
					original_prompt: prompt,
					slide_count: slideCount,
					language: language,
					template_style: templateStyle,
					generated_by: "claude-code-timeline-variants",
				},
			});
		}

		// Language-specific instructions
		const languageInstructions = {
			en: "Generate content in English",
			uz: "Generate content in Uzbek language",
			ru: "Generate content in Russian language",
		};

		// Style instructions
		const styleInstructions = {
			modern: "Use modern, engaging style with clear headings",
			minimal: "Use minimal, clean style with focus on key points",
			business: "Use professional business style with data-driven content",
		};

		const claudePrompt = `
You are a professional presentation creator. Create a detailed presentation outline based on this request: "${prompt}"

Requirements:
- Create exactly ${slideCount} slides
- ${languageInstructions[language as keyof typeof languageInstructions] || "Generate content in English"}
- ${styleInstructions[templateStyle as keyof typeof styleInstructions] || "Use modern, engaging style"}
- Include slide titles, main content, and speaker notes
- Ensure logical flow between slides
- Add suggested visual elements for each slide

Return the response as a JSON object with this exact structure:
{
    "title": "Presentation Title",
    "description": "Brief description of the presentation",
    "slides": [
        {
            "slide_number": 1,
            "title": "Slide Title",
            "content": [
                "Main point 1",
                "Main point 2",
                "Main point 3"
            ],
            "speaker_notes": "Notes for the presenter",
            "visual_suggestions": "Suggested images, charts, or graphics",
            "slide_type": "title|content|image|chart|conclusion"
        }
    ]
}

Make sure the JSON is valid and properly formatted. Generate meaningful, specific content related to the topic.`;

		console.log("Generating presentation with Claude Code API...");

		// Note: In Claude Code environment, we can directly use our capabilities
		// This is a simulated Claude response that would be generated by the actual Claude API

		// For now, let's create a more intelligent mock response based on the prompt
		const presentationContent = await generateIntelligentContent(
			prompt,
			slideCount,
			language,
		);

		// Also generate timeline variants for video integration
		const timelineVariants = await generateTimelineVariants(
			prompt,
			slideCount,
			language,
		);

		return NextResponse.json({
			success: true,
			content: presentationContent,
			timeline_variants: timelineVariants,
			metadata: {
				original_prompt: prompt,
				slide_count: slideCount,
				language: language,
				template_style: templateStyle,
				generated_by: "claude-code-api",
			},
		});
	} catch (error) {
		console.error("Claude API error:", error);
		return NextResponse.json(
			{
				success: false,
				error: "Failed to generate presentation",
				message: error instanceof Error ? error.message : "Unknown error",
			},
			{ status: 500 },
		);
	}
}

interface TimelineScene {
	id: string;
	type: "text" | "image" | "video" | "audio";
	startTime: number;
	duration: number;
	content: {
		text?: string;
		imageUrl?: string;
		videoUrl?: string;
		audioUrl?: string;
		position?: { x: number; y: number };
		size?: { width: number; height: number };
		style?: Record<string, any>;
	};
	effects?: {
		fadeIn?: boolean;
		fadeOut?: boolean;
		slide?: string;
		zoom?: boolean;
	};
}

interface TimelineVariant {
	id: string;
	name: string;
	description: string;
	totalDuration: number;
	scenes: TimelineScene[];
	style: "minimal" | "dynamic" | "educational" | "business" | "creative";
}

async function generateTimelineVariants(
	prompt: string,
	slideCount: number,
	language: string,
): Promise<TimelineVariant[]> {
	const variants: TimelineVariant[] = [];

	// Variant 1: Minimal Text-focused
	variants.push({
		id: "minimal",
		name: language === "uz" ? "Minimal Matn" : "Minimal Text",
		description:
			language === "uz"
				? "Sodda matn va chiroyli animatsiyalar"
				: "Simple text with elegant animations",
		totalDuration: slideCount * 4, // 4 seconds per slide
		style: "minimal",
		scenes: generateMinimalScenes(prompt, slideCount, language),
	});

	// Variant 2: Image-rich Dynamic
	variants.push({
		id: "dynamic",
		name: language === "uz" ? "Dinamik Rasmlar" : "Dynamic Images",
		description:
			language === "uz"
				? "Har bir slaydda professional rasmlar"
				: "Professional images for each slide",
		totalDuration: slideCount * 6, // 6 seconds per slide
		style: "dynamic",
		scenes: generateDynamicScenes(prompt, slideCount, language),
	});

	// Variant 3: Educational Step-by-step
	variants.push({
		id: "educational",
		name: language === "uz" ? "Ta'limiy Qadamlar" : "Educational Steps",
		description:
			language === "uz"
				? "Bosqichma-bosqich tushuntirish animatsiyalar bilan"
				: "Step-by-step explanation with animations",
		totalDuration: slideCount * 8, // 8 seconds per slide
		style: "educational",
		scenes: generateEducationalScenes(prompt, slideCount, language),
	});

	// Variant 4: Business Professional
	variants.push({
		id: "business",
		name: language === "uz" ? "Professional Biznes" : "Business Professional",
		description:
			language === "uz"
				? "Professional ko'rinish, grafiklar va diagrammalar"
				: "Professional look with charts and diagrams",
		totalDuration: slideCount * 5, // 5 seconds per slide
		style: "business",
		scenes: generateBusinessScenes(prompt, slideCount, language),
	});

	// Variant 5: Creative Storytelling
	variants.push({
		id: "creative",
		name: language === "uz" ? "Ijodiy Hikoya" : "Creative Story",
		description:
			language === "uz"
				? "Hikoya ko'rinishida, qiziqarli animatsiyalar"
				: "Storytelling format with engaging animations",
		totalDuration: slideCount * 7, // 7 seconds per slide
		style: "creative",
		scenes: generateCreativeScenes(prompt, slideCount, language),
	});

	return variants;
}

function generateMinimalScenes(
	prompt: string,
	slideCount: number,
	language: string,
): TimelineScene[] {
	const scenes: TimelineScene[] = [];
	let currentTime = 0;

	for (let i = 0; i < slideCount; i++) {
		const slideTitle =
			i === 0
				? language === "uz"
					? "Kirish"
					: "Introduction"
				: i === slideCount - 1
					? language === "uz"
						? "Xulosa"
						: "Conclusion"
					: `${language === "uz" ? "Bo'lim" : "Section"} ${i}`;

		// Title scene
		scenes.push({
			id: `title-${i}`,
			type: "text",
			startTime: currentTime,
			duration: 2,
			content: {
				text: slideTitle,
				position: { x: 50, y: 30 },
				style: {
					fontSize: "48px",
					fontWeight: "bold",
					color: "#2563eb",
					textAlign: "center",
				},
			},
			effects: { fadeIn: true },
		});

		// Content scene
		scenes.push({
			id: `content-${i}`,
			type: "text",
			startTime: currentTime + 1,
			duration: 2,
			content: {
				text: `${prompt} - ${language === "uz" ? "Asosiy nuqta" : "Key point"} ${i + 1}`,
				position: { x: 50, y: 60 },
				style: {
					fontSize: "24px",
					color: "#374151",
					textAlign: "center",
				},
			},
			effects: { fadeIn: true, fadeOut: true },
		});

		currentTime += 4;
	}

	return scenes;
}

function generateDynamicScenes(
	prompt: string,
	slideCount: number,
	language: string,
): TimelineScene[] {
	const scenes: TimelineScene[] = [];
	let currentTime = 0;

	// Define image search terms based on prompt
	const imageKeywords = getImageKeywords(prompt);

	for (let i = 0; i < slideCount; i++) {
		// Background image
		scenes.push({
			id: `bg-${i}`,
			type: "image",
			startTime: currentTime,
			duration: 6,
			content: {
				imageUrl: `https://images.pexels.com/photos/3184639/pexels-photo-3184639.jpeg?auto=compress&cs=tinysrgb&w=1920&h=1080`,
				position: { x: 0, y: 0 },
				size: { width: 100, height: 100 },
			},
			effects: { fadeIn: true },
		});

		// Title overlay
		scenes.push({
			id: `title-${i}`,
			type: "text",
			startTime: currentTime + 0.5,
			duration: 5,
			content: {
				text: `${prompt} - ${language === "uz" ? "Bo'lim" : "Section"} ${i + 1}`,
				position: { x: 50, y: 20 },
				style: {
					fontSize: "42px",
					fontWeight: "bold",
					color: "#ffffff",
					textShadow: "2px 2px 4px rgba(0,0,0,0.8)",
					textAlign: "center",
				},
			},
			effects: { slide: "up" },
		});

		// Content text
		scenes.push({
			id: `content-${i}`,
			type: "text",
			startTime: currentTime + 2,
			duration: 4,
			content: {
				text:
					language === "uz"
						? "Bu mavzuda muhim ma'lumotlar va amaliy misollar"
						: "Important information and practical examples on this topic",
				position: { x: 50, y: 70 },
				style: {
					fontSize: "20px",
					color: "#ffffff",
					backgroundColor: "rgba(0,0,0,0.6)",
					padding: "15px",
					borderRadius: "10px",
					textAlign: "center",
				},
			},
			effects: { fadeIn: true },
		});

		currentTime += 6;
	}

	return scenes;
}

function generateEducationalScenes(
	prompt: string,
	slideCount: number,
	language: string,
): TimelineScene[] {
	const scenes: TimelineScene[] = [];
	let currentTime = 0;

	for (let i = 0; i < slideCount; i++) {
		// Step number
		scenes.push({
			id: `step-${i}`,
			type: "text",
			startTime: currentTime,
			duration: 1.5,
			content: {
				text: `${i + 1}`,
				position: { x: 10, y: 10 },
				style: {
					fontSize: "72px",
					fontWeight: "bold",
					color: "#dc2626",
					backgroundColor: "#fef2f2",
					borderRadius: "50%",
					width: "80px",
					height: "80px",
					display: "flex",
					alignItems: "center",
					justifyContent: "center",
				},
			},
			effects: { zoom: true },
		});

		// Title
		scenes.push({
			id: `title-${i}`,
			type: "text",
			startTime: currentTime + 1,
			duration: 7,
			content: {
				text:
					i === 0
						? language === "uz"
							? "Mavzuni boshlash"
							: "Getting Started"
						: `${language === "uz" ? "Qadam" : "Step"} ${i + 1}: ${prompt}`,
				position: { x: 50, y: 25 },
				style: {
					fontSize: "36px",
					fontWeight: "bold",
					color: "#1f2937",
				},
			},
			effects: { slide: "left" },
		});

		// Explanation
		scenes.push({
			id: `explanation-${i}`,
			type: "text",
			startTime: currentTime + 3,
			duration: 5,
			content: {
				text:
					language === "uz"
						? "Bu qadamda biz muhim tushunchalarni o'rganamiz va amaliy misollar ko'ramiz."
						: "In this step we learn important concepts and see practical examples.",
				position: { x: 50, y: 60 },
				style: {
					fontSize: "18px",
					color: "#4b5563",
					lineHeight: "1.6",
				},
			},
			effects: { fadeIn: true },
		});

		// Example box
		scenes.push({
			id: `example-${i}`,
			type: "text",
			startTime: currentTime + 5,
			duration: 3,
			content: {
				text:
					language === "uz"
						? "💡 Misol: Amaliy qo'llash"
						: "💡 Example: Practical Application",
				position: { x: 50, y: 80 },
				style: {
					fontSize: "16px",
					color: "#059669",
					backgroundColor: "#ecfdf5",
					padding: "10px",
					borderLeft: "4px solid #10b981",
					borderRadius: "4px",
				},
			},
			effects: { slide: "up" },
		});

		currentTime += 8;
	}

	return scenes;
}

function generateBusinessScenes(
	prompt: string,
	slideCount: number,
	language: string,
): TimelineScene[] {
	const scenes: TimelineScene[] = [];
	let currentTime = 0;

	for (let i = 0; i < slideCount; i++) {
		// Background gradient
		scenes.push({
			id: `bg-${i}`,
			type: "image",
			startTime: currentTime,
			duration: 5,
			content: {
				imageUrl:
					"https://images.pexels.com/photos/3183197/pexels-photo-3183197.jpeg?auto=compress&cs=tinysrgb&w=1920&h=1080",
				position: { x: 0, y: 0 },
				size: { width: 100, height: 100 },
			},
		});

		// Title bar
		scenes.push({
			id: `title-bar-${i}`,
			type: "text",
			startTime: currentTime,
			duration: 5,
			content: {
				text: "",
				position: { x: 0, y: 0 },
				style: {
					backgroundColor: "rgba(37, 99, 235, 0.9)",
					height: "80px",
					width: "100%",
				},
			},
		});

		// Title
		scenes.push({
			id: `title-${i}`,
			type: "text",
			startTime: currentTime + 0.5,
			duration: 4.5,
			content: {
				text: `${prompt} - ${language === "uz" ? "Tahlil" : "Analysis"} ${i + 1}`,
				position: { x: 50, y: 8 },
				style: {
					fontSize: "32px",
					fontWeight: "600",
					color: "#ffffff",
					textAlign: "center",
				},
			},
			effects: { slide: "right" },
		});

		// Chart placeholder
		scenes.push({
			id: `chart-${i}`,
			type: "text",
			startTime: currentTime + 1.5,
			duration: 3.5,
			content: {
				text: "📊",
				position: { x: 20, y: 40 },
				style: {
					fontSize: "120px",
				},
			},
			effects: { zoom: true },
		});

		// Data points
		scenes.push({
			id: `data-${i}`,
			type: "text",
			startTime: currentTime + 2.5,
			duration: 2.5,
			content: {
				text:
					language === "uz"
						? "• Asosiy ko'rsatkichlar\n• Tahlil natijalari\n• Tavsiyalar"
						: "• Key Metrics\n• Analysis Results\n• Recommendations",
				position: { x: 65, y: 50 },
				style: {
					fontSize: "18px",
					color: "#1f2937",
					lineHeight: "2",
				},
			},
			effects: { fadeIn: true },
		});

		currentTime += 5;
	}

	return scenes;
}

function generateCreativeScenes(
	prompt: string,
	slideCount: number,
	language: string,
): TimelineScene[] {
	const scenes: TimelineScene[] = [];
	let currentTime = 0;

	const colors = ["#ef4444", "#f59e0b", "#10b981", "#3b82f6", "#8b5cf6"];

	for (let i = 0; i < slideCount; i++) {
		const color = colors[i % colors.length];

		// Animated background
		scenes.push({
			id: `bg-${i}`,
			type: "text",
			startTime: currentTime,
			duration: 7,
			content: {
				text: "",
				style: {
					background: `linear-gradient(135deg, ${color}20, ${color}10)`,
					width: "100%",
					height: "100%",
				},
			},
		});

		// Large emoji/icon
		scenes.push({
			id: `icon-${i}`,
			type: "text",
			startTime: currentTime + 0.5,
			duration: 6.5,
			content: {
				text: getCreativeIcon(i, slideCount),
				position: { x: 20, y: 30 },
				style: {
					fontSize: "150px",
				},
			},
			effects: { zoom: true },
		});

		// Story text
		scenes.push({
			id: `story-${i}`,
			type: "text",
			startTime: currentTime + 2,
			duration: 5,
			content: {
				text:
					language === "uz"
						? `Bu hikoyaning ${i + 1}-qismi: ${prompt} haqida qiziqarli ma'lumotlar`
						: `Chapter ${i + 1} of our story: Interesting facts about ${prompt}`,
				position: { x: 60, y: 40 },
				style: {
					fontSize: "24px",
					color: "#1f2937",
					fontStyle: "italic",
					lineHeight: "1.6",
				},
			},
			effects: { slide: "left" },
		});

		// Quote or highlight
		scenes.push({
			id: `highlight-${i}`,
			type: "text",
			startTime: currentTime + 4,
			duration: 3,
			content: {
				text:
					language === "uz"
						? `"Har bir qadam - yangi kashfiyot"`
						: `"Every step is a new discovery"`,
				position: { x: 50, y: 75 },
				style: {
					fontSize: "20px",
					color: color,
					fontWeight: "bold",
					textAlign: "center",
					fontStyle: "italic",
				},
			},
			effects: { fadeIn: true },
		});

		currentTime += 7;
	}

	return scenes;
}

function getImageKeywords(prompt: string): string[] {
	const lowerPrompt = prompt.toLowerCase();

	if (lowerPrompt.includes("business") || lowerPrompt.includes("biznes")) {
		return ["business", "office", "meeting", "presentation"];
	}
	if (lowerPrompt.includes("education") || lowerPrompt.includes("ta'lim")) {
		return ["education", "learning", "classroom", "student"];
	}
	if (
		lowerPrompt.includes("technology") ||
		lowerPrompt.includes("texnologiya")
	) {
		return ["technology", "computer", "innovation", "digital"];
	}
	if (lowerPrompt.includes("to be") || lowerPrompt.includes("grammar")) {
		return ["education", "language", "learning", "english"];
	}

	return ["presentation", "business", "modern", "professional"];
}

function getCreativeIcon(index: number, total: number): string {
	const icons = ["🚀", "💡", "🎯", "⭐", "🔥", "💎", "🌟", "✨", "🎨", "🎭"];
	return icons[index % icons.length];
}

async function generateIntelligentContent(
	prompt: string,
	slideCount: number,
	language: string,
): Promise<PresentationContent> {
	// This function will generate more intelligent content based on the prompt
	// In a real implementation, this would call Claude API directly

	const isEnglishGrammar =
		prompt.toLowerCase().includes("to be") ||
		prompt.toLowerCase().includes("english") ||
		prompt.toLowerCase().includes("grammar");

	if (language === "uz" && isEnglishGrammar) {
		return {
			title: "Ingliz tilida 'To Be' fe'li",
			description:
				"Ingliz tilida 'to be' fe'lining qo'llanishi va grammatik qoidalari haqida taqdimot",
			slides: [
				{
					slide_number: 1,
					title: "Ingliz tilida 'To Be' fe'li",
					content: [
						"Ingliz tilining eng muhim fe'li",
						"Barcha zamonlarda ishlatiladi",
						"Grammatikaning asosi",
					],
					speaker_notes:
						"Bu taqdimot orqali 'to be' fe'lining barcha jihatlarini o'rganamiz",
					visual_suggestions: "Ingliz bayrog'i va grammatik jadval tasvirlari",
					slide_type: "title",
				},
				{
					slide_number: 2,
					title: "To Be fe'lining shakllari",
					content: [
						"I am - Men",
						"You are - Sen/Siz",
						"He/She/It is - U",
						"We are - Biz",
						"They are - Ular",
					],
					speaker_notes: "Har bir shaxs uchun alohida shakllar mavjud",
					visual_suggestions:
						"Jadval ko'rinishida shaxslar va ularning shakllari",
					slide_type: "content",
				},
				{
					slide_number: 3,
					title: "Hozirgi zamon (Present Tense)",
					content: [
						"I am a student - Men talabaman",
						"You are kind - Sen mehribonsan",
						"She is beautiful - U go'zal",
						"We are friends - Biz do'stmiz",
					],
					speaker_notes:
						"Hozirgi zamonda holat va xususiyatlarni ifodalash uchun ishlatiladi",
					visual_suggestions: "Misollar bilan bog'liq rasmlar",
					slide_type: "content",
				},
				{
					slide_number: 4,
					title: "O'tgan zamon (Past Tense)",
					content: [
						"I was - Men edim",
						"You were - Sen/Siz eding",
						"He/She/It was - U edi",
						"We/They were - Biz/Ular edi",
					],
					speaker_notes:
						"O'tgan zamondagi holatlar uchun was va were ishlatiladi",
					visual_suggestions: "Vaqt chizig'i va o'tgan voqealar rasmlari",
					slide_type: "content",
				},
				{
					slide_number: 5,
					title: "Kelajak zamon (Future Tense)",
					content: [
						"I will be - Men bo'laman",
						"You will be - Sen/Siz bo'lasiz",
						"He/She/It will be - U bo'ladi",
						"We/They will be - Biz/Ular bo'lamiz",
					],
					speaker_notes: "Kelajakdagi holatlar uchun 'will be' ishlatiladi",
					visual_suggestions: "Kelajak rejalar va maqsadlar tasvirlari",
					slide_type: "content",
				},
				{
					slide_number: 6,
					title: "Inkoriy gaplar (Negative)",
					content: [
						"I am not - Men emasman",
						"You are not (aren't) - Sen/Siz emassiz",
						"He is not (isn't) - U emas",
						"We are not (aren't) - Biz emasmiz",
					],
					speaker_notes: "Not qo'shimchasi bilan inkor hosil qilinadi",
					visual_suggestions: "X belgisi va inkor misollar",
					slide_type: "content",
				},
				{
					slide_number: 7,
					title: "So'roq gaplar (Questions)",
					content: [
						"Am I? - Menmi?",
						"Are you? - Senmi/Sizmi?",
						"Is he/she/it? - Umi?",
						"Are we/they? - Bizmi/Ularmi?",
					],
					speaker_notes: "Fe'l oldinga chiqarib so'roq gapi hosil qilinadi",
					visual_suggestions: "So'roq belgisi va dialog rasmlari",
					slide_type: "content",
				},
				{
					slide_number: 8,
					title: "Qisqartirish (Contractions)",
					content: [
						"I'm = I am",
						"You're = You are",
						"He's = He is",
						"We're = We are",
						"They're = They are",
					],
					speaker_notes: "Rasmiy bo'lmagan nutqda qisqartirishlar ishlatiladi",
					visual_suggestions: "Apostraf belgisi va qisqartirish misollar",
					slide_type: "content",
				},
				{
					slide_number: 9,
					title: "Amaliy mashqlar",
					content: [
						"Gaplarni to'ldiring",
						"Tarjima qiling",
						"So'roq gapiga aylantiring",
						"Inkor gapini hosil qiling",
					],
					speaker_notes: "O'quvchilar bilan interaktiv mashqlar o'tkazing",
					visual_suggestions: "Mashq varaqlari va interactive elementlar",
					slide_type: "content",
				},
				{
					slide_number: 10,
					title: "Xulosa",
					content: [
						"To be fe'li grammatikaning asosi",
						"Har kuni ishlatiladi",
						"Mashq qilish muhim",
						"Keyingi darsda yangi mavzu",
					],
					speaker_notes: "Darsni yakunlab, savollar qabul qiling",
					visual_suggestions: "Yakun va keyingi qadamlar rasmi",
					slide_type: "conclusion",
				},
			],
		};
	}

	// Default intelligent content for other topics
	const topicKeywords = prompt.toLowerCase();
	let adaptedContent: PresentationContent;

	if (
		topicKeywords.includes("ai") ||
		topicKeywords.includes("artificial intelligence")
	) {
		adaptedContent = generateAIContent(slideCount, language);
	} else if (
		topicKeywords.includes("business") ||
		topicKeywords.includes("marketing")
	) {
		adaptedContent = generateBusinessContent(slideCount, language);
	} else if (
		topicKeywords.includes("education") ||
		topicKeywords.includes("teaching")
	) {
		adaptedContent = generateEducationContent(slideCount, language);
	} else if (
		topicKeywords.includes("matematik") ||
		topicKeywords.includes("ildiz") ||
		topicKeywords.includes("math") ||
		topicKeywords.includes("roots") ||
		topicKeywords.includes("square root")
	) {
		adaptedContent = generateMathContent(slideCount, language);
	} else {
		adaptedContent = generateGenericContent(prompt, slideCount, language);
	}

	return adaptedContent;
}

function generateAIContent(
	slideCount: number,
	language: string,
): PresentationContent {
	const content =
		language === "uz"
			? {
					title: "Sun'iy Intellekt: Kelajak Texnologiyasi",
					description:
						"Sun'iy intellekt texnologiyalari va ularning hayotimizga ta'siri",
					baseSlides: [
						{
							title: "Sun'iy Intellekt nima?",
							content: [
								"AI ta'rifi",
								"Asosiy tushunchalar",
								"Tarixiy rivojlanish",
							],
						},
						{
							title: "AI turlari",
							content: ["Kuchsiz AI", "Kuchli AI", "Super AI"],
						},
						{
							title: "Zamonaviy qo'llanishlar",
							content: ["Sog'liqni saqlash", "Transport", "Ta'lim sohas"],
						},
					],
				}
			: {
					title: "Artificial Intelligence: Technology of the Future",
					description:
						"Understanding AI technologies and their impact on our lives",
					baseSlides: [
						{
							title: "What is AI?",
							content: [
								"Definition of AI",
								"Core concepts",
								"Historical development",
							],
						},
						{
							title: "Types of AI",
							content: ["Weak AI", "Strong AI", "Super AI"],
						},
						{
							title: "Modern Applications",
							content: ["Healthcare", "Transportation", "Education sector"],
						},
					],
				};

	return generateFromTemplate(content, slideCount);
}

function generateBusinessContent(
	slideCount: number,
	language: string,
): PresentationContent {
	const content =
		language === "uz"
			? {
					title: "Biznes Strategiyasi va Rivojlanish",
					description:
						"Zamonaviy biznes dunyosida muvaffaqiyat qozonish yo'llari",
					baseSlides: [
						{
							title: "Bozor tahlili",
							content: ["Raqobatchilar", "Mijozlar ehtiyojlari", "Trends"],
						},
						{
							title: "Marketing strategiya",
							content: [
								"Brand building",
								"Digital marketing",
								"Customer retention",
							],
						},
						{
							title: "Moliyaviy rejalashtirish",
							content: ["Budget", "Investitsiya", "Risk management"],
						},
					],
				}
			: {
					title: "Business Strategy and Development",
					description: "Pathways to success in the modern business world",
					baseSlides: [
						{
							title: "Market Analysis",
							content: ["Competitors", "Customer needs", "Market trends"],
						},
						{
							title: "Marketing Strategy",
							content: [
								"Brand building",
								"Digital marketing",
								"Customer retention",
							],
						},
						{
							title: "Financial Planning",
							content: ["Budgeting", "Investment", "Risk management"],
						},
					],
				};

	return generateFromTemplate(content, slideCount);
}

function generateMathContent(
	slideCount: number,
	language: string,
): PresentationContent {
	const content =
		language === "uz"
			? {
					title: "Matematika: Ildizlar va Ularning Xossalari",
					description:
						"Matematik ildizlar, kvadrat ildiz va ularning amaliy qo'llanishi",
					baseSlides: [
						{
							title: "Ildiz nima?",
							content: [
								"√ belgisining ma'nosi",
								"Kvadrat ildiz ta'rifi",
								"Ildizning geometrik talqini",
							],
						},
						{
							title: "Kvadrat ildiz",
							content: [
								"√9 = 3 (chunki 3² = 9)",
								"√16 = 4 (chunki 4² = 16)",
								"√25 = 5 (chunki 5² = 25)",
							],
						},
						{
							title: "Ildizning xossalari",
							content: [
								"√(a×b) = √a × √b",
								"√(a/b) = √a / √b",
								"√a² = |a|",
							],
						},
						{
							title: "Kub ildiz",
							content: [
								"∛8 = 2 (chunki 2³ = 8)",
								"∛27 = 3 (chunki 3³ = 27)",
								"∛64 = 4 (chunki 4³ = 64)",
							],
						},
						{
							title: "Ildizlarni hisoblash",
							content: [
								"Mukammal kvadratlar",
								"Yaqinlashtirish usullari",
								"Kalkulyator yordamida",
							],
						},
						{
							title: "Ildizlar bilan amallar",
							content: [
								"Ildizlarni qo'shish",
								"Ildizlarni ko'paytirish",
								"Ildizlarni soddalashtrish",
							],
						},
						{
							title: "Amaliy qo'llanish",
							content: [
								"Geometriyada (Pifagor teoremasi)",
								"Fizikada (tezlik hisobi)",
								"Injenerlikda (maydon hisoblash)",
							],
						},
					],
				}
			: {
					title: "Mathematics: Roots and Their Properties",
					description:
						"Mathematical roots, square roots and their practical applications",
					baseSlides: [
						{
							title: "What is a Root?",
							content: [
								"Meaning of √ symbol",
								"Definition of square root",
								"Geometric interpretation",
							],
						},
						{
							title: "Square Roots",
							content: [
								"√9 = 3 (because 3² = 9)",
								"√16 = 4 (because 4² = 16)",
								"√25 = 5 (because 5² = 25)",
							],
						},
						{
							title: "Properties of Roots",
							content: [
								"√(a×b) = √a × √b",
								"√(a/b) = √a / √b",
								"√a² = |a|",
							],
						},
						{
							title: "Cube Roots",
							content: [
								"∛8 = 2 (because 2³ = 8)",
								"∛27 = 3 (because 3³ = 27)",
								"∛64 = 4 (because 4³ = 64)",
							],
						},
						{
							title: "Calculating Roots",
							content: [
								"Perfect squares",
								"Approximation methods",
								"Using calculator",
							],
						},
						{
							title: "Operations with Roots",
							content: [
								"Adding roots",
								"Multiplying roots",
								"Simplifying roots",
							],
						},
						{
							title: "Practical Applications",
							content: [
								"Geometry (Pythagorean theorem)",
								"Physics (velocity calculations)",
								"Engineering (area calculations)",
							],
						},
					],
				};

	return generateFromTemplate(content, slideCount);
}

function generateEducationContent(
	slideCount: number,
	language: string,
): PresentationContent {
	const content =
		language === "uz"
			? {
					title: "Zamonaviy Ta'lim Texnologiyalari",
					description:
						"Ta'limda innovatsion yondashuvlar va digital texnologiyalar",
					baseSlides: [
						{
							title: "E-learning platformalari",
							content: [
								"Online darslar",
								"Interactive content",
								"Progress tracking",
							],
						},
						{
							title: "Gamification",
							content: ["O'yin elementlari", "Motivatsiya", "Engagement"],
						},
						{
							title: "Personalized learning",
							content: ["Individual approach", "Adaptive systems", "AI tutors"],
						},
					],
				}
			: {
					title: "Modern Educational Technologies",
					description:
						"Innovative approaches and digital technologies in education",
					baseSlides: [
						{
							title: "E-learning Platforms",
							content: [
								"Online courses",
								"Interactive content",
								"Progress tracking",
							],
						},
						{
							title: "Gamification",
							content: ["Game elements", "Motivation", "Student engagement"],
						},
						{
							title: "Personalized Learning",
							content: ["Individual approach", "Adaptive systems", "AI tutors"],
						},
					],
				};

	return generateFromTemplate(content, slideCount);
}

function generateGenericContent(
	prompt: string,
	slideCount: number,
	language: string,
): PresentationContent {
	const title =
		language === "uz"
			? `Taqdimot: ${prompt.charAt(0).toUpperCase() + prompt.slice(1)}`
			: `Presentation: ${prompt.charAt(0).toUpperCase() + prompt.slice(1)}`;

	const description =
		language === "uz"
			? `${prompt} mavzusida batafsil taqdimot`
			: `Detailed presentation on ${prompt}`;

	return {
		title,
		description,
		slides: Array.from({ length: slideCount }, (_, i) => ({
			slide_number: i + 1,
			title:
				i === 0
					? language === "uz"
						? "Kirish"
						: "Introduction"
					: i === slideCount - 1
						? language === "uz"
							? "Xulosa"
							: "Conclusion"
						: language === "uz"
							? `${i + 1}-bo'lim: Asosiy mazmun`
							: `Section ${i + 1}: Main Content`,
			content:
				i === 0
					? language === "uz"
						? [
								"Taqdimotga xush kelibsiz",
								"Mavzu haqida umumiy ma'lumot",
								"Asosiy maqsadlar",
							]
						: [
								"Welcome to the presentation",
								"Overview of the topic",
								"Key objectives",
							]
					: language === "uz"
						? [
								`${prompt} ning ${i}-aspekti`,
								`Muhim nuqtalar`,
								`Amaliy misollar`,
							]
						: [`Aspect ${i} of ${prompt}`, `Key points`, `Practical examples`],
			speaker_notes:
				language === "uz"
					? `${i + 1}-slayd uchun batafsil tushuntirish`
					: `Detailed explanation for slide ${i + 1}`,
			visual_suggestions:
				language === "uz"
					? "Tegishli tasvirlar va grafiklar qo'shing"
					: "Add relevant images and graphics",
			slide_type:
				i === 0 ? "title" : i === slideCount - 1 ? "conclusion" : "content",
		})),
	};
}

function generateFromTemplate(
	template: any,
	slideCount: number,
): PresentationContent {
	const slides: SlideContent[] = [];

	// Add intro slide
	slides.push({
		slide_number: 1,
		title: template.baseSlides[0]?.title || "Introduction",
		content: template.baseSlides[0]?.content || [
			"Welcome",
			"Overview",
			"Objectives",
		],
		speaker_notes: "Start with introduction and overview",
		visual_suggestions: "Add title slide with relevant imagery",
		slide_type: "title",
	});

	// Add content slides
	for (let i = 1; i < slideCount - 1; i++) {
		const baseSlide = template.baseSlides[i % template.baseSlides.length];
		slides.push({
			slide_number: i + 1,
			title: baseSlide?.title || `Content ${i + 1}`,
			content: baseSlide?.content || [
				`Point ${i + 1}.1`,
				`Point ${i + 1}.2`,
				`Point ${i + 1}.3`,
			],
			speaker_notes: `Explain the concepts in slide ${i + 1}`,
			visual_suggestions: "Add supporting visuals and diagrams",
			slide_type: "content",
		});
	}

	// Add conclusion slide
	if (slideCount > 1) {
		slides.push({
			slide_number: slideCount,
			title: "Conclusion",
			content: ["Summary of key points", "Future implications", "Thank you"],
			speaker_notes: "Summarize and conclude the presentation",
			visual_suggestions: "Add closing visuals and contact information",
			slide_type: "conclusion",
		});
	}

	return {
		title: template.title,
		description: template.description,
		slides,
	};
}
